{
 "AWSTemplateFormatVersion": "2010-09-09", 
 "Conditions": {
  "optin": {
   "Fn::Equals": [
    "Yes", 
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  }
 }, 
 "Description": "WAF v2.6.0: This template deploys an auto scaling group for utility instances BIG-IP. Example scaling policies and CloudWatch alarms are associated with the auto scaling group.", 
 "Mappings": {
  "AWSBigipThrougput": {
   "1000Mbps": {
    "Best": "Best1000Mbps"
   }, 
   "200Mbps": {
    "Best": "Best200Mbps"
   }, 
   "25Mbps": {
    "Best": "Best25Mbps"
   }, 
   "5000Mbps": {
    "Best": "Best5000Mbps"
   }
  }, 
  "BigipRegionMap": {
   "ap-northeast-1": {
    "Best1000Mbps": "ami-3a1c2d5d", 
    "Best200Mbps": "ami-301c2d57", 
    "Best25Mbps": "ami-3b1e2f5c", 
    "Best5000Mbps": "ami-b11f2ed6"
   }, 
   "ap-northeast-2": {
    "Best1000Mbps": "ami-33dc015d", 
    "Best200Mbps": "ami-b9a37ed7", 
    "Best25Mbps": "ami-e0dc018e", 
    "Best5000Mbps": "ami-e4dd008a"
   }, 
   "ap-south-1": {
    "Best1000Mbps": "ami-62dba90d", 
    "Best200Mbps": "ami-bad8aad5", 
    "Best25Mbps": "ami-07d5a768", 
    "Best5000Mbps": "ami-76d9ab19"
   }, 
   "ap-southeast-1": {
    "Best1000Mbps": "ami-4e0eb42d", 
    "Best200Mbps": "ami-5a0eb439", 
    "Best25Mbps": "ami-530eb430", 
    "Best5000Mbps": "ami-d70ab0b4"
   }, 
   "ap-southeast-2": {
    "Best1000Mbps": "ami-f4d8d397", 
    "Best200Mbps": "ami-18dfd47b", 
    "Best25Mbps": "ami-60d8d303", 
    "Best5000Mbps": "ami-f9d8d39a"
   }, 
   "ca-central-1": {
    "Best1000Mbps": "ami-0894286c", 
    "Best200Mbps": "ami-0994286d", 
    "Best25Mbps": "ami-f895299c", 
    "Best5000Mbps": "ami-93902cf7"
   }, 
   "eu-central-1": {
    "Best1000Mbps": "ami-db4f90b4", 
    "Best200Mbps": "ami-464d9229", 
    "Best25Mbps": "ami-c24e91ad", 
    "Best5000Mbps": "ami-87508fe8"
   }, 
   "eu-west-1": {
    "Best1000Mbps": "ami-87bbb6e1", 
    "Best200Mbps": "ami-30a2af56", 
    "Best25Mbps": "ami-1fbdb079", 
    "Best5000Mbps": "ami-adbcb1cb"
   }, 
   "eu-west-2": {
    "Best1000Mbps": "ami-91a0b4f5", 
    "Best200Mbps": "ami-dba5b1bf", 
    "Best25Mbps": "ami-81a5b1e5", 
    "Best5000Mbps": "ami-42a5b126"
   }, 
   "sa-east-1": {
    "Best1000Mbps": "ami-a88ee2c4", 
    "Best200Mbps": "ami-0c8ce060", 
    "Best25Mbps": "ami-d58de1b9", 
    "Best5000Mbps": "ami-208ee24c"
   }, 
   "us-east-1": {
    "Best1000Mbps": "ami-52751b44", 
    "Best200Mbps": "ami-1a78160c", 
    "Best25Mbps": "ami-09721c1f", 
    "Best5000Mbps": "ami-20791736"
   }, 
   "us-east-2": {
    "Best1000Mbps": "ami-6ce7c009", 
    "Best200Mbps": "ami-8be7c0ee", 
    "Best25Mbps": "ami-3c183f59", 
    "Best5000Mbps": "ami-d2e7c0b7"
   }, 
   "us-west-1": {
    "Best1000Mbps": "ami-c76a4ca7", 
    "Best200Mbps": "ami-7a6c4a1a", 
    "Best25Mbps": "ami-c46f49a4", 
    "Best5000Mbps": "ami-9f6c4aff"
   }, 
   "us-west-2": {
    "Best1000Mbps": "ami-66bd2606", 
    "Best200Mbps": "ami-7abd261a", 
    "Best25Mbps": "ami-6bbd260b", 
    "Best5000Mbps": "ami-c6bd26a6"
   }
  }
 }, 
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "DEPLOYMENT"
     }, 
     "Parameters": [
      "deploymentName"
     ]
    }, 
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     }, 
     "Parameters": [
      "vpc", 
      "availabilityZones", 
      "subnets", 
      "restrictedSrcAddress", 
      "bigipElasticLoadBalancer"
     ]
    }, 
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     }, 
     "Parameters": [
      "sshKey", 
      "instanceType", 
      "throughput", 
      "adminUsername", 
      "managementGuiPort", 
      "timezone", 
      "ntpServer"
     ]
    }, 
    {
     "Label": {
      "default": "AUTO SCALING CONFIGURATION"
     }, 
     "Parameters": [
      "scalingMinSize", 
      "scalingMaxSize", 
      "scaleDownBytesThreshold", 
      "scaleUpBytesThreshold", 
      "notificationEmail"
     ]
    }, 
    {
     "Label": {
      "default": "WAF VIRTUAL SERVICE CONFIGURATION"
     }, 
     "Parameters": [
      "virtualServicePort", 
      "applicationPort", 
      "appInternalDnsName", 
      "applicationPoolTagKey", 
      "applicationPoolTagValue", 
      "policyLevel"
     ]
    }, 
    {
     "Label": {
      "default": "TAGS"
     }, 
     "Parameters": [
      "application", 
      "environment", 
      "group", 
      "owner", 
      "costcenter"
     ]
    }, 
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     }, 
     "Parameters": [
      "allowUsageAnalytics"
     ]
    }
   ], 
   "ParameterLabels": {
    "adminUsername": {
     "default": "BIG-IP Admin User for clustering"
    }, 
    "allowUsageAnalytics": {
     "default": "Send Anonymous Statistics to F5"
    }, 
    "appInternalDnsName": {
     "default": "Application Pool DNS"
    }, 
    "application": {
     "default": "Application"
    }, 
    "applicationPoolTagKey": {
     "default": "Application Pool Tag Key"
    }, 
    "applicationPoolTagValue": {
     "default": "Application Pool Tag Value"
    }, 
    "applicationPort": {
     "default": "Application Pool Member Port"
    }, 
    "availabilityZones": {
     "default": "Availability Zone(s)"
    }, 
    "bigipElasticLoadBalancer": {
     "default": "Elastic Load Balancer for BIG-IP VEs"
    }, 
    "costcenter": {
     "default": "Cost Center"
    }, 
    "deploymentName": {
     "default": "Deployment Name"
    }, 
    "environment": {
     "default": "Environment"
    }, 
    "group": {
     "default": "Group"
    }, 
    "instanceType": {
     "default": "AWS Instance Size"
    }, 
    "managementGuiPort": {
     "default": "Management Port"
    }, 
    "notificationEmail": {
     "default": "Notification Email"
    }, 
    "ntpServer": {
     "default": "NTP Server"
    }, 
    "owner": {
     "default": "Owner"
    }, 
    "policyLevel": {
     "default": "Web Application Firewall Policy Level"
    }, 
    "restrictedSrcAddress": {
     "default": "Restricted Source Address"
    }, 
    "scaleDownBytesThreshold": {
     "default": "Scale Down Bytes Threshold"
    }, 
    "scaleUpBytesThreshold": {
     "default": "Scale Up Bytes Threshold"
    }, 
    "scalingMaxSize": {
     "default": "Maximum Instances"
    }, 
    "scalingMinSize": {
     "default": "Minimum Instances"
    }, 
    "sshKey": {
     "default": "SSH Key Name"
    }, 
    "subnets": {
     "default": "Subnet ID(s)"
    }, 
    "throughput": {
     "default": "Maximum Throughput"
    }, 
    "timezone": {
     "default": "Timezone (Olson)"
    }, 
    "virtualServicePort": {
     "default": "Virtual Service Port"
    }, 
    "vpc": {
     "default": "VPC ID"
    }
   }
  }, 
  "Version": "2.6.0"
 }, 
 "Outputs": {
  "bigipAutoscaleGroup": {
   "Value": {
    "Ref": "BigipAutoscaleGroup"
   }
  }, 
  "s3Bucket": {
   "Value": {
    "Ref": "S3Bucket"
   }
  }
 }, 
 "Parameters": {
  "adminUsername": {
   "AllowedPattern": "[a-zA-Z0-9._-]+", 
   "ConstraintDescription": "Verify your BIG-IP admin username. Note that the user name can contain only numeric characters, periods ( . ), underscores ( _ ), or hyphens ( - ). The user name cannot be any of the following: adm, apache, bin, daemon, guest, lp, mail, manager, mysql, named, nobody, ntp, operator, partition, password, pcap, postfix, radvd, root, rpc, rpm, sshd, syscheck, tomcat, uucp, or vcsa.", 
   "Default": "cluster-admin", 
   "Description": "BIG-IP Admin User for clustering", 
   "MaxLength": "255", 
   "MinLength": "1", 
   "Type": "String"
  }, 
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes", 
    "No"
   ], 
   "Default": "Yes", 
   "Description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.", 
   "Type": "String"
  }, 
  "appInternalDnsName": {
   "Default": "www.example.com", 
   "Description": "DNS name poolapp.example.com for the application pool.  This is not required if you are using the Service Discovery feature.", 
   "Type": "String"
  }, 
  "application": {
   "Default": "f5app", 
   "Description": "Application Tag", 
   "Type": "String"
  }, 
  "applicationPoolTagKey": {
   "Default": "default", 
   "Description": "This is used for the Service Discovery feature. If you specify a non-default value here, the template automatically discovers the pool members you have tagged with this key and the value you specify next.", 
   "Type": "String"
  }, 
  "applicationPoolTagValue": {
   "Default": "default", 
   "Description": "This is used for the Service Discovery feature. If you specify a non-default value here, the template automatically discovers the pool members you have tagged with the key you specified and this value.", 
   "Type": "String"
  }, 
  "applicationPort": {
   "ConstraintDescription": "Must be a valid port number (1-65535).", 
   "Default": "80", 
   "Description": "Port for the application pool member on BIG-IP VE", 
   "MaxValue": "65535", 
   "MinValue": "1", 
   "Type": "Number"
  }, 
  "availabilityZones": {
   "Description": "Availability Zones where you want to deploy BIG-IP VEs (we recommend at least 2)", 
   "Type": "List<AWS::EC2::AvailabilityZone::Name>"
  }, 
  "bigipElasticLoadBalancer": {
   "Default": "ExampleBigipELB", 
   "Description": "Name of the AWS Elastic Load Balancer for the BIG-IP VEs", 
   "Type": "String"
  }, 
  "costcenter": {
   "Default": "f5costcenter", 
   "Description": "Cost Center Tag", 
   "Type": "String"
  }, 
  "deploymentName": {
   "Default": "example", 
   "Description": "Name the template uses to create object names", 
   "MaxLength": 25, 
   "Type": "String"
  }, 
  "environment": {
   "Default": "f5env", 
   "Description": "Environment Name Tag", 
   "Type": "String"
  }, 
  "group": {
   "Default": "f5group", 
   "Description": "Group Tag", 
   "Type": "String"
  }, 
  "instanceType": {
   "AllowedValues": [
    "m3.2xlarge", 
    "m4.xlarge", 
    "m4.2xlarge", 
    "m4.4xlarge", 
    "m4.10xlarge", 
    "c3.4xlarge", 
    "c3.8xlarge", 
    "c4.4xlarge", 
    "c4.8xlarge"
   ], 
   "ConstraintDescription": "Must be a valid BIG-IP BEST virtual EC2 instance type.", 
   "Default": "m4.xlarge", 
   "Description": "AWS Instance Size", 
   "Type": "String"
  }, 
  "managementGuiPort": {
   "ConstraintDescription": "Must be a valid, unused port on the BIG-IP.", 
   "Default": 8443, 
   "Description": "Port for the BIG-IP management Configuration utility", 
   "Type": "Number"
  }, 
  "notificationEmail": {
   "AllowedPattern": ".+@.+", 
   "ConstraintDescription": "Must be a valid email address.", 
   "Description": "Valid email address to send Auto Scaling event notifications", 
   "Type": "String"
  }, 
  "ntpServer": {
   "Default": "0.pool.ntp.org", 
   "Description": "NTP server for this implementation", 
   "Type": "String"
  }, 
  "owner": {
   "Default": "f5owner", 
   "Description": "Owner Tag", 
   "Type": "String"
  }, 
  "policyLevel": {
   "AllowedValues": [
    "low", 
    "medium", 
    "high"
   ], 
   "ConstraintDescription": "Select the WAF Policy Level you want to use", 
   "Default": "high", 
   "Description": "WAF Policy Level you want to use to protect the applications", 
   "Type": "String"
  }, 
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", 
   "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.", 
   "Description": " The IP address range x.x.x.x/x that can be used to SSH to the BIG-IP instances", 
   "MaxLength": "18", 
   "MinLength": "9", 
   "Type": "String"
  }, 
  "scaleDownBytesThreshold": {
   "Default": "10000", 
   "Description": "Incoming bytes threshold to begin scaling down BIG-IP VE instances", 
   "Type": "Number"
  }, 
  "scaleUpBytesThreshold": {
   "Default": "35000", 
   "Description": "Incoming bytes threshold to begin scaling up BIG-IP VE instances", 
   "Type": "Number"
  }, 
  "scalingMaxSize": {
   "ConstraintDescription": "Must be a number between 2-8.", 
   "Default": "3", 
   "Description": "Maximum number of BIG-IP instances (2-8) that can be created in the Auto Scale Group", 
   "MaxValue": "8", 
   "MinValue": "2", 
   "Type": "Number"
  }, 
  "scalingMinSize": {
   "ConstraintDescription": "Must be a number between 1-8", 
   "Default": "1", 
   "Description": "Minimum number of BIG-IP instances (1-8) you want available in the Auto Scale Group", 
   "MaxValue": "8", 
   "MinValue": "1", 
   "Type": "Number"
  }, 
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance", 
   "Type": "AWS::EC2::KeyPair::KeyName"
  }, 
  "subnets": {
   "Description": "Public or external subnet for the availability zones", 
   "Type": "List<AWS::EC2::Subnet::Id>"
  }, 
  "throughput": {
   "AllowedValues": [
    "25Mbps", 
    "200Mbps", 
    "1000Mbps", 
    "5000Mbps"
   ], 
   "ConstraintDescription": "Select the BIG-IP throughput you want to use", 
   "Default": "1000Mbps", 
   "Description": "Maximum amount of throughput for BIG-IP VE", 
   "Type": "String"
  }, 
  "timezone": {
   "Default": "UTC", 
   "Description": "Olson timezone string from /usr/share/zoneinfo", 
   "Type": "String"
  }, 
  "virtualServicePort": {
   "ConstraintDescription": "Must be a valid port number (1-65535).", 
   "Default": "80", 
   "Description": "Port for the virtual service on BIG-IP VE", 
   "MaxValue": "65535", 
   "MinValue": "1", 
   "Type": "Number"
  }, 
  "vpc": {
   "Description": "VPC where you want to deploy the BIG-IP VEs", 
   "Type": "AWS::EC2::VPC::Id"
  }
 }, 
 "Resources": {
  "BigipAutoScalingAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ], 
       "Effect": "Allow", 
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ], 
     "Version": "2012-10-17"
    }, 
    "Path": "/", 
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "s3:ListBucket"
         ], 
         "Effect": "Allow", 
         "Resource": {
          "Fn::Join": [
           "", 
           [
            "arn:aws:s3:::", 
            {
             "Ref": "S3Bucket"
            }
           ]
          ]
         }
        }, 
        {
         "Action": [
          "s3:PutObject", 
          "s3:GetObject", 
          "s3:DeleteObject"
         ], 
         "Effect": "Allow", 
         "Resource": {
          "Fn::Join": [
           "", 
           [
            "arn:aws:s3:::", 
            {
             "Ref": "S3Bucket"
            }, 
            "/*"
           ]
          ]
         }
        }, 
        {
         "Action": [
          "sqs:SendMessage", 
          "sqs:ReceiveMessage", 
          "sqs:DeleteMessage"
         ], 
         "Effect": "Allow", 
         "Resource": {
          "Fn::GetAtt": [
           "SQSQueue", 
           "Arn"
          ]
         }
        }, 
        {
         "Action": [
          "autoscaling:DescribeAutoScalingGroups", 
          "autoscaling:DescribeAutoScalingInstances", 
          "autoscaling:SetInstanceProtection", 
          "ec2:DescribeInstances", 
          "ec2:DescribeInstanceStatus", 
          "ec2:DescribeAddresses", 
          "ec2:AssociateAddress", 
          "ec2:DisassociateAddress", 
          "ec2:DescribeNetworkInterfaces", 
          "ec2:DescribeNetworkInterfaceAttributes", 
          "ec2:DescribeRouteTables", 
          "ec2:ReplaceRoute", 
          "ec2:assignprivateipaddresses", 
          "sts:AssumeRole", 
          "cloudwatch:PutMetricData"
         ], 
         "Effect": "Allow", 
         "Resource": [
          "*"
         ]
        }
       ], 
       "Version": "2012-10-17"
      }, 
      "PolicyName": "BigipAutoScalingAcccessPolicy"
     }
    ]
   }, 
   "Type": "AWS::IAM::Role"
  }, 
  "BigipAutoScalingInstanceProfile": {
   "Properties": {
    "Path": "/", 
    "Roles": [
     {
      "Ref": "BigipAutoScalingAccessRole"
     }
    ]
   }, 
   "Type": "AWS::IAM::InstanceProfile"
  }, 
  "BigipAutoscaleGroup": {
   "Properties": {
    "Cooldown": "2400", 
    "DesiredCapacity": {
     "Ref": "scalingMinSize"
    }, 
    "HealthCheckGracePeriod": "1800", 
    "HealthCheckType": "EC2", 
    "LaunchConfigurationName": {
     "Ref": "BigipLaunchConfig"
    }, 
    "LoadBalancerNames": [
     {
      "Ref": "bigipElasticLoadBalancer"
     }
    ], 
    "MaxSize": {
     "Ref": "scalingMaxSize"
    }, 
    "MetricsCollection": [
     {
      "Granularity": "1Minute"
     }
    ], 
    "MinSize": {
     "Ref": "scalingMinSize"
    }, 
    "NotificationConfigurations": [
     {
      "NotificationTypes": [
       "autoscaling:EC2_INSTANCE_LAUNCH", 
       "autoscaling:EC2_INSTANCE_LAUNCH_ERROR", 
       "autoscaling:EC2_INSTANCE_TERMINATE", 
       "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
      ], 
      "TopicARN": {
       "Ref": "SNSTopic"
      }
     }
    ], 
    "Tags": [
     {
      "Key": "Name", 
      "PropagateAtLaunch": true, 
      "Value": {
       "Fn::Join": [
        "", 
        [
         "BIG-IP Autoscale Instance: ", 
         {
          "Ref": "deploymentName"
         }
        ]
       ]
      }
     }, 
     {
      "Key": "Application", 
      "PropagateAtLaunch": true, 
      "Value": {
       "Ref": "application"
      }
     }, 
     {
      "Key": "Environment", 
      "PropagateAtLaunch": true, 
      "Value": {
       "Ref": "environment"
      }
     }, 
     {
      "Key": "Group", 
      "PropagateAtLaunch": true, 
      "Value": {
       "Ref": "group"
      }
     }, 
     {
      "Key": "Owner", 
      "PropagateAtLaunch": true, 
      "Value": {
       "Ref": "owner"
      }
     }, 
     {
      "Key": "Costcenter", 
      "PropagateAtLaunch": true, 
      "Value": {
       "Ref": "costcenter"
      }
     }
    ], 
    "VPCZoneIdentifier": {
     "Ref": "subnets"
    }
   }, 
   "Type": "AWS::AutoScaling::AutoScalingGroup", 
   "UpdatePolicy": {
    "AutoScalingRollingUpdate": {
     "MaxBatchSize": "1", 
     "MinInstancesInService": "1", 
     "PauseTime": "PT30M"
    }
   }
  }, 
  "BigipHighbytesAlarm": {
   "DependsOn": "BigipAutoscaleGroup", 
   "Properties": {
    "ActionsEnabled": "True", 
    "AlarmActions": [
     {
      "Ref": "BigipScaleUpPolicy"
     }
    ], 
    "AlarmDescription": "Throughput exceeds average threshold after 1 successive interval of 1 minute", 
    "ComparisonOperator": "GreaterThanThreshold", 
    "EvaluationPeriods": "1", 
    "MetricName": "throughput-per-sec", 
    "Namespace": {
     "Ref": "BigipAutoscaleGroup"
    }, 
    "Period": "60", 
    "Statistic": "Average", 
    "Threshold": {
     "Ref": "scaleUpBytesThreshold"
    }
   }, 
   "Type": "AWS::CloudWatch::Alarm"
  }, 
  "BigipLaunchConfig": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "001-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       }, 
       "002-install-libs": {
        "command": "nohup /config/installCloudLibs.sh &> /var/log/cloudlibs-install.log < /dev/null &"
       }, 
       "003-1nic-setup": {
        "command": {
         "Fn::Join": [
          " ", 
          [
           "nohup /config/cloud/waitThenRun.sh", 
           "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js", 
           "--log-level debug", 
           "--file /config/cloud/aws/node_modules/f5-cloud-libs/scripts/aws/1nicSetup.sh", 
           "--cwd /config/cloud/aws/node_modules/f5-cloud-libs/scripts/aws", 
           "-o /var/log/1nicSetup.log", 
           "--signal 1_NIC_SETUP_DONE", 
           "&>> /var/log/cloudlibs-install.log < /dev/null", 
           "&"
          ]
         ]
        }
       }, 
       "004-create-admin-user": {
        "command": {
         "Fn::Join": [
          "", 
          [
           "nohup /config/cloud/waitThenRun.sh", 
           " f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js", 
           " --log-level debug", 
           " --signal ADMIN_CREATED", 
           " --wait-for 1_NIC_SETUP_DONE", 
           " --file /config/cloud/aws/createUser.sh", 
           " --cl-args '", 
           {
            "Ref": "adminUsername"
           }, 
           "'", 
           " -o /var/log/createUser.log", 
           " &>> /var/log/cloudlibs-install.log < /dev/null", 
           " &"
          ]
         ]
        }
       }, 
       "005-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin", 
          {
           "Fn::Join": [
            " ", 
            [
             "DEPLOYMENTID=`echo \"", 
             {
              "Ref": "AWS::StackId"
             }, 
             "\"|sha512sum|cut -d \" \" -f 1`;", 
             "CUSTOMERID=`echo \"", 
             {
              "Ref": "AWS::AccountId"
             }, 
             "\"|sha512sum|cut -d \" \" -f 1`;", 
             "NAME_SERVER=`/config/cloud/getNameServer.sh eth0`;", 
             "nohup /config/cloud/waitThenRun.sh", 
             "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/onboard.js", 
             "--log-level debug", 
             "--wait-for ADMIN_CREATED", 
             "-o /var/log/onboard.log", 
             "--host localhost", 
             "--user", 
             {
              "Ref": "adminUsername"
             }, 
             "--password-url file:///config/cloud/aws/.adminPassword", 
             "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`", 
             "--ntp ", 
             {
              "Ref": "ntpServer"
             }, 
             "--tz ", 
             {
              "Ref": "timezone"
             }, 
             "--dns ${NAME_SERVER}", 
             "--port 8443", 
             "--ssl-port ", 
             {
              "Ref": "managementGuiPort"
             }, 
             "--module ltm:nominal", 
             "--module asm:nominal", 
             "--metrics \"cloudName:aws,region:${region},bigipVersion:13.0.0.2.0.1671,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-autoscale-bigip.template,templateVersion:2.6.0,licenseType:hourly\"", 
             "--ping", 
             "&>> /var/log/cloudlibs-install.log < /dev/null", 
             "&"
            ]
           ]
          }, 
          {
           "Fn::Join": [
            " ", 
            [
             "NAME_SERVER=`/config/cloud/getNameServer.sh eth0`;", 
             "nohup /config/cloud/waitThenRun.sh", 
             "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/onboard.js", 
             "--log-level debug", 
             "--wait-for ADMIN_CREATED", 
             "-o /var/log/onboard.log", 
             "--host localhost", 
             "--user", 
             {
              "Ref": "adminUsername"
             }, 
             "--password-url file:///config/cloud/aws/.adminPassword", 
             "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`", 
             "--ntp ", 
             {
              "Ref": "ntpServer"
             }, 
             "--tz ", 
             {
              "Ref": "timezone"
             }, 
             "--dns ${NAME_SERVER}", 
             "--port 8443", 
             "--ssl-port ", 
             {
              "Ref": "managementGuiPort"
             }, 
             "--module ltm:nominal", 
             "--module asm:nominal", 
             "--ping", 
             "&>> /var/log/cloudlibs-install.log < /dev/null", 
             "&"
            ]
           ]
          }
         ]
        }
       }, 
       "006-custom-config": {
        "command": {
         "Fn::Join": [
          " ", 
          [
           "nohup /config/cloud/waitThenRun.sh", 
           "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js", 
           "--log-level debug", 
           "--file /config/cloud/aws/custom-config.sh", 
           "--cwd /config/cloud/aws", 
           "-o /var/log/custom-config.log", 
           "--wait-for ONBOARD_DONE", 
           "&>> /var/log/cloudlibs-install.log < /dev/null", 
           "&"
          ]
         ]
        }
       }
      }, 
      "files": {
       "/config/cloud/asm-policy-linux.tar.gz": {
        "group": "root", 
        "mode": "000644", 
        "owner": "root", 
        "source": "http://cdn.f5.com/product/blackbox/aws/asm-policy-linux.tar.gz"
       }, 
       "/config/cloud/aws/createUser.sh": {
        "content": {
         "Fn::Join": [
          "\n", 
          [
           "# Generated from v2.6.0\n", 
           "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword", 
           "PASSWORD=$(/bin/sed -e $'s:[!\\'\"%{};/|#\\x20\\\\\\\\]:\\\\\\\\&:g' < /config/cloud/aws/.adminPassword)", 
           "if [ \"$1\" == admin ]; then", 
           "    /usr/bin/tmsh modify /auth user \"$1\" password ${PASSWORD}", 
           "else", 
           "    tmsh create auth user \"$1\" password ${PASSWORD} shell bash partition-access replace-all-with { all-partitions { role admin } }", 
           "fi", 
           "sleep 5"
          ]
         ]
        }, 
        "group": "root", 
        "mode": "000755", 
        "owner": "root"
       }, 
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "", 
          [
           "#!/bin/bash\n", 
           "# Generated from v2.6.0\n", 
           "date\n", 
           ". /config/cloud/aws/onboard_config_vars\n", 
           "echo \"applicationPoolTagKey=$applicationPoolTagKey\" \n", 
           "echo \"applicationPoolTagValue=$applicationPoolTagValue\" \n", 
           "BIGIP_ASG_NAME=`f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-aws/scripts/getAutoscaleGroupName.js` \n", 
           "tmsh modify sys autoscale-group autoscale-group-id ${BIGIP_ASG_NAME} \n", 
           "tmsh create sys icall script uploadMetrics definition { exec /config/cloud/aws/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-aws/scripts/reportMetrics.sh }\n", 
           "tmsh create sys icall handler periodic /Common/metricUploadHandler { first-occurrence now interval 60 script /Common/uploadMetrics }\n", 
           "(crontab -l 2>/dev/null; echo '*/2 * * * * /config/cloud/aws/run_autoscale_update.sh') | crontab -\n", 
           "tmsh save /sys config\n", 
           "echo 'Attempting to Join or Initiate Autoscale Cluster' \n", 
           "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/autoscale.js --cloud aws --provider-options s3Bucket:${s3Bucket},sqsUrl:${sqsUrl},mgmtPort:${managementGuiPort} --host localhost --port ${managementGuiPort} --user ${adminUsername} --password-url file:///config/cloud/aws/.adminPassword --device-group autoscale-group --block-sync -c join --log-level debug --output /var/log/aws-autoscale.log\n", 
           "if [ -f /config/cloud/master ]; then \n", 
           "  if `jq '.ucsLoaded' < /config/cloud/master`; then \n", 
           "    echo \"UCS backup loaded from backup folder in S3 bucket ${s3Bucket}.\"\n", 
           "  else\n", 
           "    echo 'SELF-SELECTED as Master ... Initiated Autoscale Cluster ... Loading default config'\n", 
           "    tmsh modify cm device-group autoscale-group asm-sync enabled\n", 
           "    tmsh modify cm device-group autoscale-group save-on-auto-sync true\n",
           "    tmsh load sys application template /config/cloud/f5.http.v1.2.0rc7.tmpl\n", 
           "    tmsh load sys application template /config/cloud/aws/f5.service_discovery.tmpl\n", 
           "    source /config/cloud/aws/node_modules/f5-cloud-libs/scripts/waitForBigip.sh;wait-for-bigip\n", 
           "    ### START CUSTOM CONFIGURTION:  Policy Name/Policy URL, etc. \n", 
           "    tmsh load asm policy file /config/cloud/asm-policy-linux-${policyLevel}.xml\n", 
           "    # modify asm policy names below (ex. /Common/linux-${policyLevel}) to match policy name in the xml file\n", 
           "    tmsh modify asm policy /Common/linux-${policyLevel} active\n", 
           "    tmsh create ltm policy app-ltm-policy strategy first-match legacy\n", 
           "    tmsh modify ltm policy app-ltm-policy controls add { asm }\n", 
           "    tmsh modify ltm policy app-ltm-policy rules add { associate-asm-policy { actions replace-all-with { 0 { asm request enable policy /Common/linux-${policyLevel} } } } }\n", 
           "    # deploy logging profiles\n", 
           "    # profile names\n", 
           "    local_asm_log_name='Log illegal requests'\n", 
           "    if [ \"${applicationPoolTagKey}\" != \"default\" ]\n", 
           "    then\n", 
           "        tmsh create ltm pool ${deploymentName} { monitor http }\n", 
           "        tmsh create sys application service ${deploymentName} { device-group autoscale-group template f5.http.v1.2.0rc7 lists add { asm__security_logging { value { \"${local_asm_log_name}\" } } } tables add { pool__members { column-names { addr port connection_limit } rows {{ row { ${deploymentName} ${applicationPort} 0 }}}}} variables add { pool__pool_to_use { value /Common/${deploymentName} } asm__use_asm { value app-ltm-policy } pool__addr { value 0.0.0.0 } pool__mask { value 0.0.0.0 } pool__port { value ${virtualServicePort} } monitor__http_version { value http11 } }}\n", 
           "        tmsh create sys application service ${deploymentName}_sd { template f5.service_discovery variables add { cloud__aws_use_role { value no } cloud__cloud_provider { value aws } cloud__aws_region { value ${region} } pool__interval { value 15 } pool__lb_method_choice { value least-connections-member } pool__member_conn_limit { value 0 } pool__pool_to_use { value /Common/${deploymentName} } pool__member_port { value ${applicationPort} } pool__public_private { value private } pool__tag_key { value ${applicationPoolTagKey} } pool__tag_value { value ${applicationPoolTagValue} } }}\n", 
           "    else\n", 
           "        tmsh create ltm node ${deploymentName} fqdn { name ${appInternalDnsName} }\n", 
           "        tmsh create sys application service ${deploymentName} { device-group autoscale-group template f5.http.v1.2.0rc7 tables add { pool__members { column-names { addr port connection_limit } rows {{ row { ${deploymentName} ${applicationPort} 0 }}}}} variables add { asm__use_asm { value app-ltm-policy } pool__addr { value 0.0.0.0 } pool__mask { value 0.0.0.0 } pool__port { value ${virtualServicePort} } monitor__http_version { value http11 } }}\n", 
           "    fi\n", 
           "    ### END CUSTOM CONFIGURATION\n", 
           "    tmsh save /sys config\n", 
           "    f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/autoscale.js --cloud aws --provider-options s3Bucket:${s3Bucket},sqsUrl:${sqsUrl},mgmtPort:${managementGuiPort}", 
           "      --host localhost --port ${managementGuiPort} --user ${adminUsername} --password-url file:///config/cloud/aws/.adminPassword -c unblock-sync --log-level debug \n", 
           "  fi\n", 
           "fi\n", 
           "date\n", 
           "echo 'custom-config.sh complete'\n"
          ]
         ]
        }, 
        "group": "root", 
        "mode": "000755", 
        "owner": "root"
       }, 
       "/config/cloud/aws/f5.service_discovery.tmpl": {
        "group": "root", 
        "mode": "000644", 
        "owner": "root", 
        "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/v1.1.1/f5-service-discovery/f5.service_discovery.tmpl"
       }, 
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "", 
          [
           "#!/bin/bash\n", 
           "# Generated from v2.6.0\n", 
           "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n", 
           "region='", 
           {
            "Ref": "AWS::Region"
           }, 
           "'\n", 
           "deploymentName='", 
           {
            "Ref": "deploymentName"
           }, 
           "'\n", 
           "adminUsername='", 
           {
            "Ref": "adminUsername"
           }, 
           "'\n", 
           "managementGuiPort='", 
           {
            "Ref": "managementGuiPort"
           }, 
           "'\n", 
           "timezone='", 
           {
            "Ref": "timezone"
           }, 
           "'\n", 
           "ntpServer='", 
           {
            "Ref": "ntpServer"
           }, 
           "'\n", 
           "virtualServicePort='", 
           {
            "Ref": "virtualServicePort"
           }, 
           "'\n", 
           "applicationPort='", 
           {
            "Ref": "applicationPort"
           }, 
           "'\n", 
           "appInternalDnsName='", 
           {
            "Ref": "appInternalDnsName"
           }, 
           "'\n", 
           "applicationPoolTagKey='", 
           {
            "Ref": "applicationPoolTagKey"
           }, 
           "'\n", 
           "applicationPoolTagValue='", 
           {
            "Ref": "applicationPoolTagValue"
           }, 
           "'\n", 
           "policyLevel='", 
           {
            "Ref": "policyLevel"
           }, 
           "'\n", 
           "s3Bucket='", 
           {
            "Ref": "S3Bucket"
           }, 
           "'\n", 
           "sqsUrl='", 
           {
            "Ref": "SQSQueue"
           }, 
           "'\n"
          ]
         ]
        }
       }, 
       "/config/cloud/aws/run_autoscale_update.sh": {
        "content": {
         "Fn::Join": [
          "", 
          [
           "#!/bin/bash\n", 
           "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/autoscale.js", 
           " --cloud aws --provider-options '", 
           "s3Bucket:", 
           {
            "Ref": "S3Bucket"
           }, 
           ",sqsUrl:", 
           {
            "Ref": "SQSQueue"
           }, 
           ",mgmtPort:", 
           {
            "Ref": "managementGuiPort"
           }, 
           "'", 
           " --host localhost", 
           " --port ", 
           {
            "Ref": "managementGuiPort"
           }, 
           " --user ", 
           {
            "Ref": "adminUsername"
           }, 
           " --password-url file:///config/cloud/aws/.adminPassword", 
           " --device-group autoscale-group", 
           " --cluster-action update", 
           " --log-level silly --output /var/log/aws-autoscale.log\n"
          ]
         ]
        }, 
        "group": "root", 
        "mode": "000755", 
        "owner": "root"
       }, 
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root", 
        "mode": "000644", 
        "owner": "root", 
        "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-aws/v1.5.0/dist/f5-cloud-libs-aws.tar.gz"
       }, 
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root", 
        "mode": "000644", 
        "owner": "root", 
        "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v3.4.1/dist/f5-cloud-libs.tar.gz"
       }, 
       "/config/cloud/f5.http.v1.2.0rc7.tmpl": {
        "group": "root", 
        "mode": "000644", 
        "owner": "root", 
        "source": "http://cdn.f5.com/product/blackbox/aws/f5.http.v1.2.0rc7.tmpl"
       }, 
       "/config/cloud/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n", 
          [
           "# Generated from v2.6.0\n", 
           "INTERFACE=$1", 
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`", 
           "VPC_CIDR_BLOCK=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`", 
           "VPC_NET=${VPC_CIDR_BLOCK%/*}", 
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`", 
           "echo $NAME_SERVER"
          ]
         ]
        }, 
        "group": "root", 
        "mode": "000755", 
        "owner": "root"
       }, 
       "/config/cloud/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n", 
          [
           "#!/bin/bash", 
           "# Generated from v2.6.0\n", 
           "while true; do echo waiting for cloud libs install to complete", 
           "    if [ -f /config/cloud/cloudLibsReady ]; then", 
           "        echo cloud libs installed", 
           "        break", 
           "    else", 
           "        sleep 10", 
           "    fi", 
           "done", 
           "\"$@\""
          ]
         ]
        }, 
        "group": "root", 
        "mode": "000755", 
        "owner": "root"
       }, 
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n", 
          [
           "#!/bin/bash", 
           "# Generated from v2.6.0\n", 
           "echo about to execute", 
           "checks=0", 
           "while [ $checks -lt 120 ]; do echo checking mcpd", 
           "    tmsh -a show sys mcp-state field-fmt | grep -q running", 
           "    if [ $? == 0 ]; then", 
           "        echo mcpd ready", 
           "        break", 
           "    fi", 
           "    echo mcpd not ready yet", 
           "    let checks=checks+1", 
           "    sleep 10", 
           "done", 
           "echo loading verifyHash script", 
           "if ! tmsh load sys config merge file /config/verifyHash; then", 
           "    echo cannot validate signature of /config/verifyHash", 
           "    exit", 
           "fi", 
           "echo loaded verifyHash", 
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/aws/f5.service_discovery.tmpl\")", 
           "for fileToVerify in \"${filesToVerify[@]}\"", 
           "do", 
           "    echo verifying \"$fileToVerify\"", 
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then", 
           "       echo \"$fileToVerify\" is not valid", 
           "        exit 1", 
           "    fi", 
           "    echo verified \"$fileToVerify\"", 
           "done", 
           "mkdir -p /config/cloud/aws/node_modules", 
           "echo expanding f5-cloud-libs.tar.gz", 
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules", 
           "echo installing dependencies", 
           "tar xvfz /config/cloud/asm-policy-linux.tar.gz -C /config/cloud", 
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/f5-cloud-libs/node_modules", 
           "echo cloud libs install complete", 
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        }, 
        "group": "root", 
        "mode": "000755", 
        "owner": "root"
       }, 
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 5b5035fe7e1d98260be409cc29d65da49bcaaa9becb4124b308023ce8790439356a2b85de4ce5a4433532967e1d5f13379e98eeadcf251b607032f47481d832f\n            set hashes(f5-cloud-libs-aws.tar.gz) 279254b05d175df4ba1155fa810b3ea66a38e69198d7a6840ac9443ce730a5997e12c3b76af76ebadf13550d8bb0d45a5b09badfff4aac89e75d121bc166358d\n            set hashes(f5-cloud-libs-azure.tar.gz) 3c52145334fe80da577f980cdfbb1ef71fa4284b2f7fb4fa6f241cf50528e9fdc8df088a8312c3f6b90d3db198c787f7c10739e4098efb071cc29bf0ed70437b\n            set hashes(f5-cloud-libs-gce.tar.gz) 6ef33cc94c806b1e4e9e25ebb96a20eb1fe5975a83b2cd82b0d6ccbc8374be113ac74121d697f3bfc26bf49a55e948200f731607ce9aa9d23cd2e81299a653c1\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 4c125f7cbc4d701cf50f03de479ebe99a08c2b2c3fa6aae3e229eb3f0bba98bb513d630368229c98e7c5c907e6a3168ece2f8f576267514bad4f6730ea14d454\n            set hashes(f5.policy_creator.tmpl) 54d265e0a573d3ae99864adf4e054b293644e48a54de1e19e8a6826aa32ab03bd04c7255fd9c980c3673e9cd326b0ced513665a91367add1866875e5ef3c4e3a\n            set hashes(f5.service_discovery.tmpl) d4008a2c5a7f26cc42eb5cbe2171e15e6e95afb1b34fb03d04f6c1b80f154d896e6faaa2e04fbb85fd8e0e51b479dbfcd286357ce0967b162233cc57e0138b96\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature QyT1FQtNajuJkkmgI6ypFnbFu+JJw2UDV673xVwdt8LbE/aQ6JNS0QINerma90YU/uzj8ppThge5jttl3zSVYFkGXmHrvyDujdq50+/HfRnXBtieR+eW0Ro+4Kqfw83NLdebhsyRxJvfrzeAcJ/3VSnfmcERo/PKytcjtL5GFJpvUoaphfPz6YebbBg9VImBjfMBFczaWdKosLwriqG45Goh918lJLa6xYlLVRG+r+FJ9EXYaGty8jt/w4B0gl9oA4iqwmGPaB/GLBYgvek1tYeTl71wRRn/C8e0hsECqI0BAF6Yc7K06uzZcSYhTYQmMKIuebB/ckSdERzA3Mao+Q==\n    signing-key /Common/f5-irule\n}", 
        "group": "root", 
        "mode": "000755", 
        "owner": "root"
       }
      }
     }
    }
   }, 
   "Properties": {
    "AssociatePublicIpAddress": false, 
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda", 
      "Ebs": {
       "DeleteOnTermination": "true", 
       "VolumeType": "gp2"
      }
     }, 
     {
      "DeviceName": "/dev/xvdb", 
      "NoDevice": "true"
     }
    ], 
    "IamInstanceProfile": {
     "Ref": "BigipAutoScalingInstanceProfile"
    }, 
    "ImageId": {
     "Fn::FindInMap": [
      "BigipRegionMap", 
      {
       "Ref": "AWS::Region"
      }, 
      {
       "Fn::FindInMap": [
        "AWSBigipThrougput", 
        {
         "Ref": "throughput"
        }, 
        "Best"
       ]
      }
     ]
    }, 
    "InstanceMonitoring": false, 
    "InstanceType": {
     "Ref": "instanceType"
    }, 
    "KeyName": {
     "Ref": "sshKey"
    }, 
    "SecurityGroups": [
     {
      "Ref": "bigipSecurityGroup"
     }
    ], 
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "", 
       [
        "#!/bin/bash -x\n", 
        "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ", 
        {
         "Ref": "AWS::StackId"
        }, 
        " -r BigipLaunchConfig", 
        " --region ", 
        {
         "Ref": "AWS::Region"
        }, 
        "\n"
       ]
      ]
     }
    }
   }, 
   "Type": "AWS::AutoScaling::LaunchConfiguration"
  }, 
  "BigipLowbytesAlarm": {
   "DependsOn": "BigipAutoscaleGroup", 
   "Properties": {
    "ActionsEnabled": "True", 
    "AlarmActions": [
     {
      "Ref": "BigipScaleDownPolicy"
     }
    ], 
    "AlarmDescription": "Throughput below average threshold for 10 successive intervals of 5 minutes", 
    "ComparisonOperator": "LessThanThreshold", 
    "EvaluationPeriods": "10", 
    "MetricName": "throughput-per-sec", 
    "Namespace": {
     "Ref": "BigipAutoscaleGroup"
    }, 
    "Period": "300", 
    "Statistic": "Average", 
    "Threshold": {
     "Ref": "scaleDownBytesThreshold"
    }
   }, 
   "Type": "AWS::CloudWatch::Alarm"
  }, 
  "BigipScaleDownPolicy": {
   "Properties": {
    "AdjustmentType": "ChangeInCapacity", 
    "AutoScalingGroupName": {
     "Ref": "BigipAutoscaleGroup"
    }, 
    "Cooldown": "2400", 
    "ScalingAdjustment": "-1"
   }, 
   "Type": "AWS::AutoScaling::ScalingPolicy"
  }, 
  "BigipScaleUpPolicy": {
   "Properties": {
    "AdjustmentType": "ChangeInCapacity", 
    "AutoScalingGroupName": {
     "Ref": "BigipAutoscaleGroup"
    }, 
    "Cooldown": "2400", 
    "ScalingAdjustment": "1"
   }, 
   "Type": "AWS::AutoScaling::ScalingPolicy"
  }, 
  "S3Bucket": {
   "Properties": {
    "AccessControl": "BucketOwnerFullControl"
   }, 
   "Type": "AWS::S3::Bucket"
  }, 
  "SNSTopic": {
   "Properties": {
    "Subscription": [
     {
      "Endpoint": {
       "Ref": "notificationEmail"
      }, 
      "Protocol": "email"
     }
    ]
   }, 
   "Type": "AWS::SNS::Topic"
  }, 
  "SQSQueue": {
   "Properties": {
    "MessageRetentionPeriod": 3600
   }, 
   "Type": "AWS::SQS::Queue"
  }, 
  "bigipSecurityGroup": {
   "Properties": {
    "GroupDescription": "Enable SSH access via port 22 and enable access to virtual services", 
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      }, 
      "FromPort": "22", 
      "IpProtocol": "tcp", 
      "ToPort": "22"
     }, 
     {
      "CidrIp": "0.0.0.0/0", 
      "FromPort": "80", 
      "IpProtocol": "tcp", 
      "ToPort": "90"
     }, 
     {
      "CidrIp": "0.0.0.0/0", 
      "FromPort": "443", 
      "IpProtocol": "tcp", 
      "ToPort": "443"
     }, 
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      }, 
      "FromPort": {
       "Ref": "managementGuiPort"
      }, 
      "IpProtocol": "tcp", 
      "ToPort": {
       "Ref": "managementGuiPort"
      }
     }
    ], 
    "Tags": [
     {
      "Key": "Name", 
      "Value": {
       "Fn::Join": [
        "", 
        [
         "BIG-IP Autoscale Security Group: ", 
         {
          "Ref": "deploymentName"
         }
        ]
       ]
      }
     }, 
     {
      "Key": "Application", 
      "Value": {
       "Ref": "application"
      }
     }, 
     {
      "Key": "Environment", 
      "Value": {
       "Ref": "environment"
      }
     }, 
     {
      "Key": "Group", 
      "Value": {
       "Ref": "group"
      }
     }, 
     {
      "Key": "Owner", 
      "Value": {
       "Ref": "owner"
      }
     }, 
     {
      "Key": "Costcenter", 
      "Value": {
       "Ref": "costcenter"
      }
     }
    ], 
    "VpcId": {
     "Ref": "vpc"
    }
   }, 
   "Type": "AWS::EC2::SecurityGroup"
  }, 
  "bigipSecurityGroupIngressAsmPolicySync": {
   "Properties": {
    "FromPort": "6123", 
    "GroupId": {
     "Ref": "bigipSecurityGroup"
    }, 
    "IpProtocol": "tcp", 
    "SourceSecurityGroupId": {
     "Ref": "bigipSecurityGroup"
    }, 
    "ToPort": "6128"
   }, 
   "Type": "AWS::EC2::SecurityGroupIngress"
  }, 
  "bigipSecurityGroupIngressConfigSync": {
   "Properties": {
    "FromPort": "4353", 
    "GroupId": {
     "Ref": "bigipSecurityGroup"
    }, 
    "IpProtocol": "tcp", 
    "SourceSecurityGroupId": {
     "Ref": "bigipSecurityGroup"
    }, 
    "ToPort": "4353"
   }, 
   "Type": "AWS::EC2::SecurityGroupIngress"
  }, 
  "bigipSecurityGroupIngressManagementGuiPort": {
   "Properties": {
    "FromPort": {
     "Ref": "managementGuiPort"
    }, 
    "GroupId": {
     "Ref": "bigipSecurityGroup"
    }, 
    "IpProtocol": "tcp", 
    "SourceSecurityGroupId": {
     "Ref": "bigipSecurityGroup"
    }, 
    "ToPort": {
     "Ref": "managementGuiPort"
    }
   }, 
   "Type": "AWS::EC2::SecurityGroupIngress"
  }
 }
}