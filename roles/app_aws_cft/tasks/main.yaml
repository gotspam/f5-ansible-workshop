---

#Launch Sample Application from Cloudformation Template

# Tear down any dependent objects 
- include: deployment-cleanup.yaml
  delegate_to: localhost

# Import any variables if nested 
- include: nested.yaml
  delegate_to: localhost

- name: Store Paramaters sent to App CFT 
  template: src="{{ cft_parameters_template_name }}" dest="{{ install_path }}/state_cache/{{ deploymentName }}/{{ service_name }}-app-cft-params.yaml"
  delegate_to: localhost

# - name: debug_params
#   debug: msg="{{ lookup('template', cft_parameters_template_name ) | from_yaml }}"

# Disclaimer: More realistic application template would take AMI ID as input
# with AMI ID being be artifact of a build pipe line (packer, etc). 
- name: Launching Application from CFT
  delegate_to: localhost
  cloudformation:
    state: "{{ cft_state }}"
    stack_name: "{{ deploymentName }}-{{ service_name }}-application"
    region: "{{ aws_region }}"
    template: "{{ install_path }}/roles/app_aws_cft/files/{{ cft_file_name }}"
    template_parameters: "{{ lookup('template', cft_parameters_template_name ) | from_yaml }}"
    tags: 
      Name: "{{ deploymentName }}-{{ service_name }}-application"
      deployment: "{{ deploymentName }}"
      serviceName: "{{ service_name }}"
  register: deploy_app_stack_results
  when: cft_state == "present"

# Persist data to disk for use across plays
- name: Persist variable data
  copy: content="{{ deploy_app_stack_results | to_yaml }}" dest="{{ install_path }}/state_cache/{{ deploymentName }}/{{ service_name }}-app-cft-output.yaml"
  when: cft_state == "present"

######

- name: Tearing Down Application from CFT
  delegate_to: localhost
  cloudformation:
    state: "{{ cft_state }}"
    stack_name: "{{ deploymentName }}-{{ service_name }}-application"
    region: "{{ aws_region }}"
    template: "{{ install_path }}/roles/app_aws_cft/files/{{ cft_file_name }}"
    template_parameters: "{{ lookup('template', cft_parameters_template_name ) | from_yaml }}"
    tags:
      Name: "{{ deploymentName }}-{{ service_name }}-application"
      deployment: "{{ deploymentName }}"
      serviceName: "{{ service_name }}"
  register: teardown_app_stack_results
  when: cft_state == "absent"

# Persist data to disk for use across plays
- name: Persist variable data
  copy: content="{{ teardown_app_stack_results | to_yaml }}" dest="{{ install_path }}/state_cache/{{ deploymentName }}/{{ service_name }}-app-cft-output.yaml"
  when: cft_state == "absent"

#- copy: content="{{ app_stack_results['stack_outputs'] | to_json }}" dest="{{ install_path }}/state_cache/{{ deploymentName }}/{{ service_name }}-app-cft-output.json"


